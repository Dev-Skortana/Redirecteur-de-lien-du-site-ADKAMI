import 'package:webdriver/async_io.dart';
import 'package:webdriver/support/async.dart';
import 'dart:async';
import 'dart:io';

class MobileTestRunner {
  WebDriver? _driver;
  
  // Configuration for the mobile devices
  static const Map<String, dynamic> iphoneConfig = {
    'viewport': {
      'width': 375,
      'height': 667,
      'deviceScaleFactor': 2,
      'isMobile': true,
      'hasTouch': true,
    },
    'userAgent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'
  };

  // Initialize WebDriver connection
  Future<void> connect({required String browserUrl}) async {
    try {
      _driver = await createDriver(
        uri: Uri.parse(browserUrl),
        desired: {
          'goog:chromeOptions': {
            'debuggerAddress': 'localhost:9222',
          }
        },
      );
      print('Successfully connected to WebDriver');
    } catch (e) {
      print('Failed to connect to WebDriver: $e');
      rethrow;
    }
  }

  // Set up mobile emulation
  Future<void> setupMobileEmulation(Map<String, dynamic> config) async {
    if (_driver == null) {
      throw Exception('WebDriver not initialized');
    }

    try {
      await _driver!.execute(
        'Mobile.setDeviceMetricsOverride',
        config['viewport'],
      );

      await _driver!.execute(
        'Network.setUserAgentOverride',
        {'userAgent': config['userAgent']},
      );
    } catch (e) {
      print('Failed to set up mobile emulation: $e');
      rethrow;
    }
  }

  // Navigate to URL
  Future<void> navigateTo(String url) async {
    if (_driver == null) {
      throw Exception('WebDriver not initialized');
    }

    try {
      await _driver!.get(url);
    } catch (e) {
      print('Navigation failed: $e');
      rethrow;
    }
  }

  // Take screenshot
  Future<void> takeScreenshot(String path) async {
    if (_driver == null) {
      throw Exception('WebDriver not initialized');
    }

    try {
      final screenshot = await _driver!.captureScreenshotAsBytes();
      await File(path).writeAsBytes(screenshot);
      print('Screenshot saved to: $path');
    } catch (e) {
      print('Failed to take screenshot: $e');
      rethrow;
    }
  }

  // Simulate network conditions
  Future<void> emulateNetworkConditions({
    bool offline = false,
    int latency = 100,
    int downloadThroughput = 131072, // 1 Mbps
    int uploadThroughput = 131072, // 1 Mbps
  }) async {
    if (_driver == null) {
      throw Exception('WebDriver not initialized');
    }

    try {
      await _driver!.execute(
        'Network.emulateNetworkConditions',
        {
          'offline': offline,
          'latency': latency,
          'downloadThroughput': downloadThroughput,
          'uploadThroughput': uploadThroughput,
        },
      );
    } catch (e) {
      print('Failed to emulate network conditions: $e');
      rethrow;
    }
  }

  // Get performance metrics
  Future<Map<String, dynamic>> getPerformanceMetrics() async {
    if (_driver == null) {
      throw Exception('WebDriver not initialized');
    }

    try {
      final metrics = await _driver!.execute('Performance.getMetrics', {});
      return metrics as Map<String, dynamic>;
    } catch (e) {
      print('Failed to get performance metrics: $e');
      rethrow;
    }
  }

  // Clean up resources
  Future<void> close() async {
    if (_driver != null) {
      await _driver!.quit();
      _driver = null;
    }
  }
}

// Example usage
void main() async {
  final runner = MobileTestRunner();

  // Set up signal handling for cleanup
  ProcessSignal.sigint.watch().listen((_) async {
    await runner.close();
    exit(0);
  });

  try {
    // Connect to browser
    await runner.connect(browserUrl: 'http://localhost:9222');

    // Set up mobile emulation
    await runner.setupMobileEmulation(MobileTestRunner.iphoneConfig);

    // Navigate to website
    await runner.navigateTo('https://example.com');

    // Simulate network conditions
    await runner.emulateNetworkConditions(
      latency: 100,
      downloadThroughput: 131072, // 1 Mbps
      uploadThroughput: 131072, // 1 Mbps
    );

    // Take screenshot
    await runner.takeScreenshot('mobile-screenshot.png');

    // Get performance metrics
    final metrics = await runner.getPerformanceMetrics();
    print('Performance metrics: $metrics');

  } catch (e) {
    print('Test failed: $e');
  } finally {
    await runner.close();
  }
}